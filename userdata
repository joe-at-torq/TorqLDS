#!/bin/bash

#Install dependencies
sudo apt update
sudo apt install -y python python3-pip net-tools tree python3-flask

#Gather Instance Data
UI_IP=$(curl https://ipinfo.io/ip)
UI_PORT="443"
UI_UUID="${deployment_uuid}"
UI_OWNER="${deployment_owner}"
UI_WEBHOOK="${deployment_webhook}"
UI_NAME="${deployment_name}"
JSON="{\"notification_type\":\"new_ui_deployed\",\"ip\":\"$UI_IP\",\"port\":\"$UI_PORT\",\"deployment_owner\":\"$UI_OWNER\",\"uuid\":\"$UI_UUID\"}"

#Notify Torq
curl -d "$JSON" -H 'Content-Type: application/json' $UI_WEBHOOK

#Wait for notification to be recieved and Route53 A Record to be created.
sleep 30s

#Run App
cd /home/ubuntu
git clone https://github.com/joe-at-torq/TorqLDS-UI.git

#Write LDS Instance Data
echo "{\"owner\":\"${deployment_owner}\",\"uuid\":\"${deployment_uuid}\",\"webhook\":\"${deployment_webhook}\"}" > /home/ubuntu/TorqLDS-UI/reg-form/lds_settings.json



#Generate SSL Certificate with Certbot and Lets Encrypt (Try up to 5 times to configure)
snap install --classic certbot
ln -s /snap/bin/certbot /usr/bin/certbot
FALLBACK="true"
COUNT=0
while [ $COUNT -le 5 ];
do
    #certbot certonly --standalone --non-interactive --agree-tos -m training@torqeng.dev -d $UI_NAME.torq.training
    FILE="/etc/letsencrypt/live/$UI_NAME.torq.training/fullchain.pem"

    if [ -f "$FILE" ]; then
        cp /etc/letsencrypt/live/$UI_NAME.torq.training/fullchain.pem TorqLDS-UI/reg-form/cert.pem
        cp /etc/letsencrypt/live/$UI_NAME.torq.training/privkey.pem TorqLDS-UI/reg-form/key.pem
        FALLBACK="false"
        break
    fi

    sleep 10s
    (( COUNT++ ))
done


#If certbot was unable to sign ssl certificate, generate a selfsigned certificate.
if [ "$FALLBACK" == "true" ];
then
    cd TorqLDS-UI/reg-form/
    openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365 -subj "/C=US/ST=Texas/L=Dallas/O=torq/OU=training/CN=*.torq.training"
    cd -
fi


#Start UI
cd TorqLDS-UI/reg-form/
nohup ./StartPublic.sh &

